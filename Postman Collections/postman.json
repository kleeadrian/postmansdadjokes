{
	"info": {
		"_postman_id": "8ecc6bd5-7526-4b46-a814-77c6731d8e74",
		"name": "Dadjokes API",
		"description": "Worst Jokes API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get Dadjoke",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7981c902-a313-40f7-9599-490a4a1f3fb6",
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for id, joke, and groaness fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(jokeObj) {",
							"        pm.expect(jokeObj).to.have.property('id').that.is.a('number');",
							"        pm.expect(jokeObj).to.have.property('joke').that.is.a('string');",
							"        pm.expect(jokeObj).to.have.property('groaness').that.is.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the id is a number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(joke) {",
							"        pm.expect(joke.id).to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Joke is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(jokeObj) {",
							"        pm.expect(jokeObj.joke).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Joke should not be empty\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0e8986e3-b6f3-4a5d-9fcd-1ded019cefef",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "291e0c5d-32ec-462d-8d28-2b4a8acff4ef",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{vault:BearToken}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "x-mock-response-code",
						"value": "404",
						"type": "text",
						"disabled": true
					},
					{
						"key": "password",
						"value": "{{vault:BearToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/dadjoke",
				"description": "### Get Dad Joke\n\nThis endpoint sends an HTTP GET request to retrieve a dad joke.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- `id` (number): The unique identifier for the dad joke.\n    \n- `joke` (string): The dad joke retrieved from the API.\n    \n- `groaness` (number): A measure of how groan-worthy the joke is, on a scale of 0 to 10.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"joke\": \"\",\n        \"groaness\": 0\n    }\n]\n\n ```"
			},
			"response": [
				{
					"id": "85571c81-62c5-4178-9e3c-a8711a02a0e5",
					"name": "200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/dadjoke"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "[{\n    \"id\":1,\n    \"joke\" : \"What happened to the Frog's car when it parked illegally? It got toad\",\n    \"groaness\": 3\n}]"
				},
				{
					"id": "7e38db7f-dc5c-4cc7-a990-734b0851d495",
					"name": "404",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/dadjoke"
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "[{\n    \"message\" : \"Looks like you can't find any jokes. It's ok, Here's a bad one. Why couldn't developer find their hotel room. It's because they were looking for room 404\"\n}]"
				}
			]
		},
		{
			"name": "Steal Dad Joke",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eecb89c2-7148-43cd-9068-ba0d9ddb31e7",
						"exec": [
							"var jsonData = pm.response.json();",
							"var fallbackValue = jsonData.attachments[0].fallback;",
							"console.log(fallbackValue)",
							"pm.collectionVariables.set(\"DadJoke\", fallbackValue);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "16ca6dea-e8fd-475a-b1bc-702836ccfbda",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://icanhazdadjoke.com/slack"
			},
			"response": []
		},
		{
			"name": "Add Dadjoke",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be898bc9-4293-4771-a26e-d33d29629886",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f4004739-be11-4b84-8279-bf372a38bce0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-mock-response-code",
						"value": "404",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"joke\" : \"{{DadJoke}}\",\n    \"groaness\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/dadjoke",
				"description": "### Add Dad Joke\n\nThis endpoint allows you to add a dad joke with its groaness level.\n\n#### Request Body\n\n- `joke` (string, required): The dad joke to be added.\n    \n- `groaness` (number, required): The groaness level of the dad joke (0-5).\n    \n\n#### Response\n\nUpon successful addition, the endpoint returns the added dad joke along with its groaness level.\n\nExample:\n\n``` json\n{\n    \"joke\": \"What do you call a factory that makes good products? A satisfactory.\",\n    \"groaness\": 3\n}\n\n ```"
			},
			"response": [
				{
					"id": "f0548b00-097c-42d8-87a2-d8a1d8664f94",
					"name": "201",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/dadjoke"
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "[{\n    \"joke\" : \"Where are all my jokes stored? In a dad-a-base\",\n    \"groaness\": 3\n}]"
				},
				{
					"id": "a809db75-0c1a-4657-8b2c-631e7e9320b9",
					"name": "404",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/dadjoke"
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "[{\n    \"message\" : \"Looks like you can't find any jokes. It's ok, Here's a bad one. Why couldn't developer find their hotel room. It's because they were looking for room 404\"\n}]"
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://1fb9ff22-1dda-47a8-bb03-451c14b4eb01.mock.pstmn.io",
			"type": "default"
		},
		{
			"key": "version",
			"value": "version"
		},
		{
			"key": "variable",
			"value": "v1"
		},
		{
			"key": "baseUrl",
			"value": "https://46cc612f-a4ba-4286-bfb7-2a51f6274bf5.mock.pstmn.io",
			"type": "default"
		},
		{
			"key": "DadJoke",
			"value": ""
		}
	]
}